##
## global configuration values
##
[global]
## Driver Update Disc vendor
# module_vendor = ENTER_VENDOR_NAME
## Driver Update Disc author
# module_author = ENTER_AUTHOR
## Driver Update Disc e-mail
# module_author_email = ENTER_AUTHOR_EMAIL
## Include SRPM files into the final ISO
include_srpm = %{global.include_srpm}

##
## Behavioural settings and generic/common definitions
##
[defaults]
major = %{defaults.major}
minor = %{defaults.minor}

##
## configuration values for the driver spec file
##
[spec_file]
## kernel module name
module_name = %{spec_file.module_name}
## RPM file name expression.
## WARNING: don't change rpm_name if you are not sure what you are doing!
# rpm_name = kmod-{global.module_vendor}-{module_name}
## Module version. It's a good idea to make it equivalent to MODULE_VERSION
## value, kernel version or some other versioning scheme used for existing DUPs.
## Note that dashes are not allowed here (replace them with underscores).
## Usually, RPMs that are released as a part of DUP have "_dupX.Y" suffix,
## in order to signify that they are non-inbox driver updates for RHEL X.Y
module_version = %{spec_file.module_version}
## RPM release version
module_rpm_release = %{spec_file.module_rpm_release}
## RPM %dist override (el7_3, for example)
rpm_dist = %{spec_file.rpm_dist}
## module build dir (drivers/infiniband/hfi1, for example).
## If the repository source code verification is in effect, it should be the
## same as the subdirectory in the repository.
module_build_dir = %{spec_file.module_build_dir}
## target kernel version (3.10.0-123.el7, for example)
## when Mock is used, the latest kernel-devel package version is used by default
## RHEL 7.0: 3.10.0-123.el7
## RHEL 7.1: 3.10.0-229.el7
## RHEL 7.2: 3.10.0-327.el7
## RHEL 7.3: 3.10.0-514.el7
## RHEL 7.4: 3.10.0-693.el7
## RHEL 7.5: 3.10.0-862.el7
kernel_version = %{spec_file.kernel_version}
## space-separated list of target architectures
## (example architectures: aarch64 x86_64 ppc64 ppc64le s390x)
kernel_arch = %{spec_file.kernel_arch}
## Install dependencies
## When DUD has firmware enabled, dependency on the firmware RPM will be added
## automatically
dependencies = %{spec_file.dependencies}
## Build dependencies
build_dependencies = %{spec_file.build_dependencies}
## module summary in the spec file
# summary = {module_name} module for Driver Update Program
## module description in the spec file
# description = {module_name} module for Driver Update Program
## Upstream commit from which the code was taken. Provide for the purposes of
## sources verification.
git_hash = %{spec_file.git_hash}

##
## firmware section
## If you want have firmware as a part of your DUP, you can just enable it here.
## Copy firmware files into the src/firmware directory. All files will be added
## automatically.
## If you need that firmware will reside in a subdirectory of /lib/firmware on
## the target system, just create the same directory structure inside
## src/firmware directory.
##
## enable firmware sub-package
firmware_include = %{spec_file.firmware_include}
## firmware package version
firmware_version = %{spec_file.firmware_version}
## firmware summary in the spec file
# firmware_summary = {module_name} firmware for Driver Update Program
## firmware description in the spec file
# firmware_description = {module_name} firmware for Driver Update Program

##
## Development package
## Currently, it contains only Module.symvers, which is useful as a build
## dependency for other modules which use ABI of this one. Module.symvers is
## placed in /usr/char/kmod-<driver_name>/Module.symvers and has to be
## copied/merged manually by dependent module's Makefile.
##
## Whether to supply development package. 0/1
devel_package = %{spec_file.devel_package}
## development package summary in the spec file
# devel_summary = {module_name} development files for Driver Update Program
## development package description in the spec file
# devel_description = {module_name} development files for Driver Update Program
