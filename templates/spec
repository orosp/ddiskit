%define kmod_name		%{MODULE_NAME}
%define kmod_vendor		%{MODULE_VENDOR}
%define kmod_driver_version	%{MODULE_VERSION}
%define kmod_rpm_release	%{MODULE_RPM_RELEASE}
%define kmod_kernel_version	%{KERNEL_VERSION}
%define kmod_kbuild_dir		%{MODULE_BUILD_DIR}

%{!?dist: %define dist .%{RPM_DIST}}

Source0:	%{kmod_name}-%{kmod_vendor}-%{kmod_driver_version}.tar.bz2
%{SOURCE_PATCHES}

%define __find_requires /usr/lib/rpm/redhat/find-requires.ksyms
%define __find_provides /usr/lib/rpm/redhat/find-provides.ksyms %{kmod_name} %{?epoch:%{epoch}:}%{version}-%{release}

Name:		%{RPM_NAME}
Version:	%{kmod_driver_version}
Release:	%{kmod_rpm_release}%{?dist}
Summary:	%{SUMMARY}
Group:		System/Kernel
License:	GPLv2
URL:		http://www.kernel.org/
BuildRoot:	%(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)
BuildRequires:	kernel-devel = %kmod_kernel_version kmod redhat-rpm-config
ExclusiveArch:	%{KERNEL_ARCH}
%global flavors_to_build default
%global kernel_source() /usr/src/kernels/%{kmod_kernel_version}.$(arch)

%global kernel_next_release	%(expr %{kernel_release} + 1)

%global _use_internal_dependency_generator 0
Provides:	kernel-modules = %kmod_kernel_version
Provides:	%{kmod_name}-kmod = %{?epoch:%{epoch}:}%{version}-%{release}
Requires(post):	/usr/sbin/depmod
Requires(postun):	/usr/sbin/depmod
Requires:	kernel >= %{kmod_kernel_version}-%{kernel_release}
Requires:	kernel <= %{kmod_kernel_version}-%{kernel_next_release}
Conflicts:	%{kmod_name}-kmod
Obsoletes:	kmod-%{kmod_name}

%description
%{DESCRIPTION}
%{FIRMWARE_BEGIN}

%package -n %{RPM_NAME}-firmware
Version:	%{FIRMWARE_VERSION}
Summary:	%{FIRMWARE_SUMMARY}
Provides:	firmware(%{kmod_name}) = %{kmod_firmware_version}
Provides:	kernel-modules = %{kmod_kernel_version}.%{_target_cpu}
%description -n  %{RPM_NAME}-firmware
%{FIRMWARE_DESCRIPTION}

%files -n %{RPM_NAME}-firmware
%defattr(644,root,root,755)
%{FIRMWARE_FILES}

%{FIRMWARE_END}
# The %post, %preun and %postun hooks are copied from kmodtool
%post
if [ -e "/boot/System.map-%{verrel}" ]; then
    /usr/sbin/depmod -aeF "/boot/System.map-%{kmod_kernel_version}" "%{kmod_kernel_version}" > /dev/null || :
fi

modules=( $(find /lib/modules/%{kmod_kernel_version}.%{arch}/extra/%{kmod_name} | grep '\.ko$') )
if [ -x "/sbin/weak-modules" ]; then
    printf '%s\n' "${modules[@]}" \
    | /sbin/weak-modules --add-modules
fi

%preun
rpm -ql kmod-%{kmod_name}-%{kmod_vendor}-%{kmod_version}-%{kmod_release}.$(arch) | grep '\.ko$' > /var/run/rpm-kmod-%{kmod_name}-modules

%postun
if [ -e "/boot/System.map-%{kmod_kernel_version}" ]; then
    /usr/sbin/depmod -aeF "/boot/System.map-%{kmod_kernel_version}" "%{kmod_kernel_version}.%(arch)" > /dev/null || :
fi

modules=( $(cat /var/run/rpm-kmod-%{kmod_name}-modules) )
rm /var/run/rpm-kmod-%{kmod_name}-modules
if [ -x "/sbin/weak-modules" ]; then
    printf '%s\n' "${modules[@]}" \
    | /sbin/weak-modules --remove-modules
fi

%files
%defattr(644,root,root,755)
/lib/modules/%{kmod_kernel_version}.%(arch)
/etc/depmod.d/%{MODULE_NAME}.conf
/usr/share/doc/kmod-%{MODULE_NAME}/greylist.txt
/usr/share/doc/kmod-%{MODULE_NAME}/Module.symvers-%(arch)

%prep
%setup -n %{MODULE_NAME}-%{MODULE_VENDOR}-%{MODULE_VERSION}
%{SOURCE_PATCHES_DO}
set -- *
mkdir source
mv "$@" source/
mkdir obj

%build
for flavor in %flavors_to_build; do
	rm -rf obj/$flavor
	cp -r source obj/$flavor
	whitelist="/lib/modules/kabi-current/kabi_whitelist_%{_target_cpu}"

	# update symvers file if existing
	if [ -e source/Module.symvers-%{_target_cpu} ]; then
		cp source/Module.symvers-%{_target_cpu} obj/$flavor/%{kmod_kbuild_dir}/Module.symvers
	fi

	make -C %{kernel_source $flavor} M=$PWD/obj/$flavor/%{kmod_kbuild_dir} \
		NOSTDINC_FLAGS="-I $PWD/obj/$flavor/include"

	# mark modules executable so that strip-to-file can strip them
	find obj/$flavor/%{kmod_kbuild_dir} -name "*.ko" -type f -exec chmod u+x '{}' +
done

for modules in $( find obj -name "*.ko" -type f | sed 's|^.*/\([^/]*\)\.ko$|\1|' | sort -u ) ; do
	echo "override $modules $(echo %{kmod_kernel_version} | sed 's/\.[^\.]*$//').* weak-updates/$modules" >> source/depmod.conf
	# update greylist
	if [[ -e $whitelist ]]; then
		nm -u obj/$flavor/%{kmod_kbuild_dir}/$modules.ko | sed 's/.*U //' |  sed 's/^\.//' | sort -u | while read -r symbol; do
			grep -q "^	$symbol\$" $whitelist || echo "$symbol" >> source/greylist.txt
		done
	else
		echo "ERROR: Whitelist for the current arch ($arch) not found."
	fi
done

%install
export INSTALL_MOD_PATH=$RPM_BUILD_ROOT
export INSTALL_MOD_DIR=extra/%{name}
for flavor in %flavors_to_build ; do
	make -C %{kernel_source $flavor} modules_install \
		M=$PWD/obj/$flavor/%{kmod_kbuild_dir}
	# Cleanup unnecessary kernel-generated module dependency files.
	find $INSTALL_MOD_PATH/lib/modules -iname 'modules.*' -exec rm {} \;
done

install -m 644 -D source/depmod.conf $RPM_BUILD_ROOT/etc/depmod.d/%{kmod_name}.conf
if [ -f source/greylist.txt ]; then
	install -m 644 -D source/greylist.txt $RPM_BUILD_ROOT/usr/share/doc/kmod-%{kmod_name}/greylist.txt
fi
if [ -e source/Module.symvers-%{_target_cpu} ]; then
	install -m 644 -D source/Module.symvers-%{_target_cpu} $RPM_BUILD_ROOT/usr/share/doc/kmod-%{kmod_name}/Module.symvers-%{_target_cpu}
fi
%{FIRMWARE_BEGIN}
%{FIRMWARE_FILES_INSTALL}
%{FIRMWARE_END}
%clean
rm -rf $RPM_BUILD_ROOT

%changelog
* %{DATE} %{MODULE_AUTHOR} <%{MODULE_AUTHOR_EMAIL}> %{MODULE_VERSION}
- Template for Driver Update module
