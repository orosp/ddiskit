.\" Code block begin/end. Borrowed from strace.1.
.de CS
.sp
.in +4n
.nf
.ft CW
..
.de CE
.ft R
.fi
.in
.sp
..
.\" Like .OP, but with ellipsis at the end in order to signify that option
.\" can be provided multiple times. Based on .OP definition in groff's
.\" an-ext.tmac.
.de OM
.  ie \\n(.$-1 \
.    RI "[\fB\\$1\fP" "\ \\$2" "]...\&"
.  el \
.    RB "[" "\\$1" "]...\&"
..
.TH DDISKIT "1"
.SH NAME
ddiskit \- Red Hat tool for Driver Update Disk creation
.SH SYNOPSIS
.SY ddiskit
.OP -h
.OP -vvv
.OP -qQ
.OP -p PROFILE
.OP -R RES_DIR
.OP -T TEMPLATE_DIR
.OP -P PROFILE_DIR
.OP -d
.OP -o DUMP_CONFIG_NAME
.OM -C KEY\fR=\fIVALUE\fR
.I ACTION
.OM \fIACTION_OPTIONS\fR
.YS
.SH DESCRIPTION
.B ddiskit
(pronounced dee-dis-kit)
aids and simplifies the creation of (back-ported) out-of-tree kernel module
RPMs and Driver Update Disks containing them.
These RPMs and DUDs are deemed suitable for using with distributions based on
Red Hat Enterprise Linux.
This version of
.B ddiskit
supports RHEL 7 and backward-compatible with RHEL 6.

.B ddiskit
assumes some workflow which is described in the
.I USAGE EXAMPLE
section.
It is tailored to the process used for developing and releasing
Driver Update Disks, and, while it can be used for creating driver packages for
RHEL-based distributions in general, it also worth considering other tools
for the similar purpose, like
.BR dkms "(8) or " akmods (1).

.SH OPTIONS
Please refer to the
.I Configuration generation
section for the description of "configuration option name" and "default value".
.SS General options
.TP
\fB-h\fR, \fB--help\fR
Print a list of options.
.B ddiskit
will exit after this action, ignoring the remainder of the command line.
.TP
\fB-v\fR, \fB--verbosity\fR
Increase output verbosity by 1.
Value of 1 means verbose output (it toggles printing of most of executed
commands and all warnings), and value of 2 is useful for debugging
(it enables printing of all the executed commands output, actions,
and messages).
Value of 3 further increases output verbosity of issued
.BR rpm (1)
commands.
.IP
Configuration option name:
.I defaults.verbosity
.br
Default value: 0
.TP
\fB-p\fR \fIPROFILE\fR, \fB--profile\fR \fIPROFILE\fR
Configuration profile to use.
Please refer to the
.I Configuration generation
section for the additional information about profiles.
.IP
Configuration option name:
.I defaults.profile
.br
Default value: none; "default" is provided in package configuration
.TP
\fB-R\fR \fIRES_DIR\fR, \fB--res-dir\fR \fIRES_DIR\fR
Resources directory.
Used as a base of evaluation for template and profile directory paths.
.IP
Configuration option name:
.I defaults.res_dir
.br
Default value: none; "/usr/share/ddiskit/" is a hard-coded default.
.TP
\fB-T\fR \fITEMPLATE_DIR\fR, \fB--template-dir\fR \fITEMPLATE_DIR\fR,
Templates directory, used as a base for searching for spec or module
configuration templates.
Please refer to the
.I File path evaluation
section for the information regarding template file path resolution.
.IP
Configuration option name:
.I defaults.template_dir
.br
Default value: none; "{res_dir}/templates" is a hard-coded default.
.TP
\fB-P\fR \fIPROFILE_DIR\fR, \fB--profile-dir\fR \fIPROFILE_DIR\fR
Profiles directory, used as a base for searching for profiles.
Please refer to the
.I File path evaluation
section for the information regarding profile file path resolution.
.IP
Configuration option name:
.I defaults.profile_dir
.br
Default value: none; "{res_dir}/profiles" is a hard-coded default.
.TP
\fB-d\fR, \fB--dump-config\fR
Dump the derived configuration after performing the action.
.IP
Configuration option name:
.I defaults.dump_config
.br
Default value: False
.TP
\fB-o\fR \fIDUMP_CONFIG_NAME\fR, \fB--dump-config-name\fR \fIDUMP_CONFIG_NAME\fR
Path to the file targeted for the configuration dump.
.IP
Configuration option name:
.I defaults.dump_config_name
.br
Default value: none; "{config}.generated" is a hard-coded default.
.TP
\fB-q\fR, \fB--quilt-enable\fR
Enable quilt support.
Please refer to the
.I QUILT INTEGRATION
section for the information regarding quilt integration.
The option sets
.I defaults.quilt_support
configuration option to
.BR True .
.TP
\fB-Q\fR, \fB--quilt-disable\fR
Disable quilt support.
The option sets
.I defaults.quilt_support
configuration option to
.BR False .
.TP
\fB-C\fR \fIKEY\fR=\fIVALUE\fR, \fB--config-option\fR \fIKEY\fR=\fIVALUE\fR
Override arbitrary configuration option that have the name
.I KEY
with
.IR VALUE .
The
.I KEY
should follow the "{\fB[\fR\fIsection_name\fR.\fB]\fR\fIkey_name\fR}" syntax,
and \fIdefaults\fR section is assumed in case \fIsection_name\fR part is
omitted.
The argument can be used multiple times in order to override multiple options.
.\"
.SS Options for prepare_sources action
.TP
\fB-c\fR \fICONFIG\fR, \fB--config\fR \fICONFIG\fR
Path to the module configuration file.
.IP
Configuration option name:
.I defaults.config
.br
Default value: "module.config"
.TP
\fB-t\fR \fICONFIG_TEMPLATE\fR, \fB--config-template\fR \fICONFIG_TEMPLATE\fR
Configuration file template.
Please refer to the
.I File path evaluation
section for the information regarding configuration template file path
resolution.
.IP
Configuration option name:
.I defaults.config_template
.br
Default value: none; "config" is a hard-coded default.
.TP
\fB-g\fR \fIGIT_DIRECTORY\fR, \fB--git-dir\fR \fIGIT_DIRECTORY\fR
Path to
.B .git
directory containing repository from where source files should be checked out.
.IP
Configuration option name:
.I defaults.git_dir
.br
Default value: none
.TP
\fB-r\fR \fIREVISION\fR, \fB--git-revision\fR \fIREVISION\fR
Revision specification at which source files should be checked out from the
repository.
.IP
Configuration option name:
.I defaults.git_revision
.br
Default value: "HEAD"
.TP
\fB-d\fR \fIDIRECTORIES\fR, \fB--git-src-directory\fR \fIDIRECTORIES\fR
Whitespace-separated list of paths which should be checked out from the
repository.
.IP
Configuration option name:
.I defaults.git_src_directory
.br
Default value: none
.\"
.SS Options for generate_spec action
.TP
\fB-c\fR \fICONFIG\fR, \fB--config\fR \fICONFIG\fR
Path to the module configuration file.
.IP
Configuration option name:
.I defaults.config
.br
Default value: "module.config"
.TP
\fB-t\fR \fISPEC_TEMPLATE\fR, \fB--spec-template\fR \fISPEC_TEMPLATE\fR
RPM spec file template.
Please refer to the
.I File path evaluation
section for the information regarding RPM spec template file path resolution.
.IP
Configuration option name:
.I defaults.spec_template
.br
Default value: none; "spec" is a hard-coded default.
.\"
.SS Options for build_rpm action
.TP
\fB-c\fR \fICONFIG\fR, \fB--config\fR \fICONFIG\fR
Path to the module configuration file.
.IP
Configuration option name:
.I defaults.config
.br
Default value: "module.config"
.TP
\fB-a\fR, \fB--tar-all\fR
Tar all files, including hidden ones (files with names starting with dot).
Otherwise, only files with names starting with non-dot character will be added
to the source tarball.
The option sets the value of the relevant configuration parameter to
.BR True .
Note that this check is independent from the check controlled by the
.I defaults.tar_strict
configuration parameter.
.IP
Configuration option name:
.I defaults.tar_all
.br
Default value: False
.TP
\fB-e\fR, \fB--tar-strict\fR
Tar only expected files.
Only the files with names matching the regular expression pattern provided in
.I defaults.src_patterns
configuration option will be added to the source tarball.
The option sets the value of the relevant configuration parameter to
.BR True .
Note that this check is independent from the check controlled by the
.I defaults.tar_all
configuration parameter.
.IP
Configuration option name:
.I defaults.tar_strict
.br
Default value: False
.TP
\fB-s\fR, \fB--srpm\fR
Force building of source RPM instead of binary one.
.B ddiskit
has several heuristics (whether host architecture is among architectures
targeted by module, whether RPM build check passes) that detect possibility
of binary RPM build and falls back to building source RPM only in case they
indicated that binary RPM build is impossible; however, one can force building
of source RPM instead of binary one with this switch.
The option sets the value of the relevant configuration parameter to
.BR True .
.IP
Configuration option name:
.I defaults.srpm
.br
Default value: False
.TP
\fB-m\fR, \fB--mock\fR
Enable
.BR mock (1)
usage for building RPM.
See the
.I MOCK SUPPORT
section for additional information.
.IP
Configuration option name:
.I defaults.mock
.br
Default value: False
.TP
\fB-r\fR \fIMOCK_CONFIG\fR, \fB--mock-config\fR \fIMOCK_CONFIG\fR
Which mock configuration should be used for building RPM.
.IP
Configuration option name:
.I defaults.mock_config
.br
Default value: "default"
.TP
\fB-l\fR, \fB--mock-offline\fR
Whether to pass
.B --offline
option to
.BR mock .
.IP
Configuration option name:
.I defaults.mock_offline
.br
Default value: False
.TP
\fB-g\fR \fILEVEL\fR, \fB--check-git-src\fR \fILEVEL\fI
Set the level of source code repository authenticity check. See the
.I SOURCE CODE VERIFICATION
section for the details.
.IP
Configuration option name:
.I defaults.check_get_src
.br
Default value: 0
.TP
\fB-G\fR, \fB--generate-spec-on-build\fR
Call the
.I generate_spec
action at the beginning of the
.I build_rpm
action execution.
This saves for calling
.I generate_spec
action separately each time module configuration or patch list are changed
(assuming that spec file does not need manual changes after generation).
.IP
Configuration option name:
.I defaults.generate_spec_on_build
.br
Default value: 0
.\"
.SS Options for build_iso action
.TP
\fB-c\fR \fICONFIG\fR, \fB--config\fR \fICONFIG\fR
Path to the module configuration file.
.IP
Configuration option name:
.I defaults.config
.br
Default value: "module.config"
.TP
\fB-i\fR \fIISOFILE\fR, \fB--isofile\fR \fIISOFILE\fR
File name for the output ISO.
.IP
Configuration option name:
.I defaults.isofile
.br
Default value: none; see also
.I build_iso
action description section.
.\"
.SS Options for dump_config action
.TP
\fB-c\fR \fICONFIG\fR, \fB--config\fR \fICONFIG\fR
Path to the module configuration file.
.IP
Configuration option name:
.I defaults.config
.br
Default value: "module.config"
.TP
\fB-o\fR \fIDUMP_CONFIG_NAME\fR, \fB--dump-config-name\fR \fIDUMP_CONFIG_NAME\fR
Name of the file where to store configuration dump.
This is the same option as the \fB-o\fR option in the
.I General options
section, and present here only for convenience.
.IP
Configuration option name:
.I defaults.dump_config_name
.br
Default value: none; "{config}.generated" is a hard-coded default.
.\"
.\"
.SH CONFIGURATION
Configuration is a sectioned key-value store, with values being strings and
interpreted based on the context (see
.I CONFIGURATION VALUES REFERENCE
section for the reference) as strings, integers, booleans (see
.I Boolean values
section for the details on boolean value derivation), or arrays.
.\"
.SS Configuration generation
In order to construct its configuration,
.B ddiskit
gathers configuration options from the multiple sources, then performs
some fixed processing.
The sources of configuration options are the following:
.IP \(bu 3
Hard-coded defaults, present in
.B ddiskit
source code.
These are mostly for default configuration search paths and for other values
which are expected to be defined one way or another. Currently, it contains
the following configuration options:
.RS
.IP \(bu 3
.IR defaults " section"
.RS
.IP \(bu 3
.IR res_dir
= "/usr/share/ddiskit"
.IP \(bu
.IR template_dir
= "{res_dir}/templates"
.IP \(bu
.IR profile_dir
= "{res_dir}/profiles"
.IP \(bu
.IR config_template
= "config"
.IP \(bu
.IR quilt_support
= True
.IP \(bu
.IR spec_template
= "spec"
.IP \(bu
.IR src_patterns
= "^Kbuild$|^Kconfig$|^Makefile$|^.*\.[ch]$"
.RE
.IP \(bu 3
.IR global " section"
.RS
.IP \(bu 3
.IR module_vendor
= "ENTER_MODULE_VENDOR"
.IP \(bu
.IR module_author
= "ENTER_MODULE_AUTHOR"
.IP \(bu 3
.IR module_author_email
= "ENTER_MODULE_AUTHOR_EMAIL"
.RE
.RE
.IP \(bu
The "package" configuration.
It contains the rest of the configuration option defaults which should be defined
for proper operation (like spec file generation).
Package configuration is read from the fixed path
"/usr/share/ddiskit/ddiskit.config"
which is not expected to be modified by user or system administrator (and is
usually overwritten by package update).
.IP \(bu
The "site" configuration. Located in "/etc/ddiskit.config", this file is
treated as a configuration file and is subject to possible changes by the
system administrator.
.IP \(bu
The "user" configuration. In case user wants some user-specific changes
(like his own default values for
.IR global.module_author " or " global.module_author_email
configuration options, as well as default profile), he should place it in
".ddiskitrc" file in his home directory.
.IP \(bu
Profile. The profile in use is derived from
.IR defaults.profile " and " default.profile_dir
configuration variables (see more in the
.I File path evaluation
section on how the path to the profile is evaluated).
It contains overrides suitable for a particular use case (for example, the
.B rh-testing
profile contains spec file description suffix with a notice that the package
provided is a testing package).
Note that the values for aforementioned configuration variables can be
overridden by
.BR -p " and " -P
command line arguments.
.IP \(bu
Module configuration. This file is usually called "module.config"
(but can be overridden by
.B -c
command line argument) and contains module-specific configuration.
It is usually generated from template by
.I prepare_sources
action and is self-documented in terms of what values user is expected
to provide there.
.IP \(bu
Command-line arguments. They update
.I defaults
section of the configuration dictionary, and usually have key name equal
to the long option name, with dashes replaced with underscores.
Configuration option name for each specific command line option is provided
in the
.I OPTIONS
section.
Unless explicitly specified (with default value being "none"),
command line option \fIalways\fR updates the configuration option value.
.PP
These files are applied one after another in aforementioned order, so the
"last wins" rule applies.
The exception from the rule are command line options, which take precedence
at each point of configuration generation (during the profile path evaluation,
for example).
.PP
The configuration files themselves are sectioned key-value files,
syntax of which is described in the
.UR https://docs.python.org/2/library/configparser.html
related Python module documentation
.UE ,
except for the interpolation part, which is home-grown and described
in the section
.IR "Configuration value evaluation" .
.\"
.SS Kernel package versioning scheme
Red Hat Enterprise Linux follows specific kernel package versioning scheme, and
.B ddiskit
employs it in order to generate proper dependencies on the kernel package.
As a result, it expects that in places where kernel version is provided,
this version follows specific scheme.
More specifically, two version schemes are supported:
.IP \(bu 3
Y-stream kernel version.
This kernel package version is shipped as a part of General Availability
release, and has the following format:
.CS
\fIkernel_version\fP.\fIkernel_patchlevel\fP.\fIkernel_sublevel\fP-\fIrhel_release\fP.\fIrpm_dist\fP
.CE
For example, RHEL 7.3 GA kernel has kernel version 3.10.0-514.el7.
As a result, it is expected that
.IR kernel_version ", " kernel_patchlevel ", " kernel_sublevel ", " rhel_release
are decimal numbers (having no more than 1, 2, 2, and 4 digits, respectively),
and
.I rpm_dist
part is provided in the form of "el\fI<number>\fR", where \fI<number>\fR is
a 1-digit or 2-digit number not less than 6.
.IP \(bu
Z-stream kernel version.
These kernel packages are provided as a part of updates for the existing release
(so-called Z-stream).
The versions of these packages have the following format:
.CS
\fIkernel_version\fP.\fIkernel_patchlevel\fP.\fIkernel_sublevel\fP-\fIrhel_release\fP\fB[\fP.\fIupdate_release\fP\fB]+\fP.\fIrpm_dist\fP
.CE
The restrictions on the parts that also used for the Y-stream kernel package
version description are the same, and \fIupdate_release\fR is a number that
can have up to 3 digits.
Example of a Z-stream kernel package version (RHEL 7.3 update from 2017-05-25):
3.10.0-514.21.1.el7.
.PP
Generally, it is expected that kernel module RPMs and Driver Update Disks are
built for using along with the Y-stream GA kernel (and all the following
Z-stream kernels, thanks to kABI compatibility), so when Z-stream kernel package
version is detected, the user is warned about this.
The differences between kernel package dependency generation in these cases
are described in the
.I Spec file generation
section.
.PP
In order to enforce these checks,
.B ddiskit
uses regular expression-based approach: it checks the version provided in the
.I defaults.kernel_version
configuration variable against regular expressions set via the
.I defaults.kernel_flex_version_re
and
.I defaults.kernel_fixed_version_re
configuration options, which contain Python regular expressions (see
.UR https://docs.python.org/2/library/re.html
Python \fBre\fR module documentation
.UE
for details about regular expression syntax) for matching Y-stream and Z-stream
kernel versioning scheme, respectively.
In order to extract parts of kernel version described above, the following
regular expression groups are used:
.TP 18
.B version
Kernel's major version
.RI ( kernel_version
in the description above).
.TQ
.B patchlevel
Kernel's patch level
.RI ( kernel_patchlevel ).
.TQ
.B sublevel
Kernel's sub-patch level
.RI ( kernel_sublevel ).
.TQ
.B rpm_release
Major part of RPM release
.RI ( rhel_release ).
.TQ
.B rpm_release_add
Remaining part of RPM release
.RI ( update_release ).
.TQ
.B rpm_dist
RPM release dist part
.RI ( rpm_dist ).
.PP
The default values of the
.I defaults.kernel_flex_version_re
and
.I defaults.kernel_fixed_version_re
configuration options are set via other configuration options:
.CS
kernel_flex_verson_re   = {kernel_nvr_re}{kernel_dist_re}
kernel_fixed_version_re = {kernel_nvr_re}{kernel_fixed_re}{kernel_dist_re}

kernel_nvr_re   = (?P<version>[0-9])\.(?P<patchlevel>[0-9]{1,2})\.(?P<sublevel>[0-9]{1,2})-(?P<rpm_release>[0-9]{1,4})
kernel_fixed_re = (?P<rpm_release_add>(\.[0-9]{1,3})+)
kernel_dist_re  = (?P<rpm_dist>\.el([6-9]|[1-9][0-9]))
.CE
This allows for some flexibility in case some tuning of these checks is needed.
.\"
.SS Configuration check
After the configuration has been constructed (and in case module configuration
is present), it is subject to a set of checks:
.IP \(bu 3
Whether
.IR global " and " spec_file
configuration sections are present.
.IP \(bu
Whether all configuration options in
.IR global " and " spec_file
sections have non-default values.
Default value is a value which is the concatenation of "ENTER_" and upper-cased
configuration key name ("ENTER_MODULE_NAME" for
.I spec_file.module_name
configuration option, for example). The exception is
.I spec_file.firmware_version
option, in case
.I spec_file.firmware_include
configuration options is set to
.BR False .
.IP \(bu
Whether
.I spec_file.kernel_version
has proper format (only Y-stream and Z-stream kernel versions are accepted).
.\"
.SS File path evaluation
Paths to various external resource files (like templates and profiles)
are evaluated based on provided resource directory and name
using the following algorithm:
.IP \(bu 3
If resource name does not have slashes, then it is considered that this name
refers to the file in the provided directory.
.IP \(bu
Otherwise, it is interpreted as a path relative to the current working
directory (which is the directory the where module configuration resides).
.PP
For example, profile "my-profile" is searched relative to profile directory
("/usr/share/ddiskit/profiles" by default), but profile "./my-profile"
is searched relative to modules configuration directory.
.\"
.SS Configuration value evaluation
Configuration option values can reference other configuration options using
the "{\fB[\fR\fIsection_name\fR.\fB]\fR\fIkey_name\fR}" syntax.
If section is not present, it is assumed that the referenced key is
in the same section as the value which references it.
If the referenced key is not found, no substitution occurs.
.PP
For example, let's assume the following configuration file:
.CS
[foo]
foo = aaa {bar} {bar.baz}
bar = bbb {baz} {bar.foo}

[bar]
foo = ccc {baz}
bar = ddd {foo.foo}
baz = eee
.CE
After the evaluation,
.I foo.foo
key would have the value "aaa bbb {baz} ddd ccc eee eee",
.I foo.bar
would equal to "bbb {baz} ccc eee",
.I bar.foo
would be "ccc eee", and
.I bar.bar
is "ddd ccc eee".
.PP
Circular dependencies are not explicitly resolved, there's only substitution
depth limit present (which is set to 8 currently).
.\"
.SS Boolean values
The values which are treated as boolean can have the following
(case-insensitive) values in order to indicate that the value
should be evaluated to
.IR True :
.BR 1 ", " t ", " y ", " true ", or " yes .
In order to indicate
.I False
value, one of the following strings may be used:
.BR 0 ", " f ", " n ", " false ", or " no .
In case configuration value doesn't evaluate to
.IR True " or " False
value, it is evaluated as
.IR None .
.I None
value is treated as
.I False
in most places, but sometimes it is important to provide specific choice,
and in these cases error would occur if boolean value was evaluated to
.IR None .
.\"
.SS Spec file generation
Before spec file generation takes place, additional configuration processing
is performed:
.IP \(bu 3
.IR spec_file.source_patches " and " spec_file.source_patches_do
generated in accordance with a lexicographically sorted list of patch files
found in the patch directory (src/patch relative to current working directory).
.I spec_file.source_patches
contains lines in the "Patch\fIN\fR: \fIpatch-file-name\fR" format, and
.I spec_file.source_patches_do
contains lines in the "%patch\fIN\fR -p1" format.
As a result, first configuration variable is suitable for patch file list
description, and second is useful in the \fB%prep\fR section for patch applying.
If the
.I default.quilt_support
configuration option is enabled, file named
.B series
is ignored in the patch directory.
.IP \(bu
.I spec_file.firmware_files
configuration variable contains list of files found in the \fBsrc/firmware\fR
directory with the \fB/lib/firmware/\fR directory prepended, which is suitable
for the \fB%files\fR section of the firmware sub-package.
.IP \(bu
.I spec_file.firmware_files_install
configuration variable contains list for firmware file installation commands
in the format "install -m 644 -D source/firmware/\fIfirmware-file-path\fR
$RPM_BUILD_ROOT/lib/firmware/\fIfirmware-file-path\fR", which is suitable
for the \fB%install\fR section of the firmware sub-package.
.IP \(bu
.I spec_file.firmware_begin
configuration option is set to "%if 1" or "%if 0" when the
.I spec_file.firmware_include
configuration variable is true or not, respectively.
.IP \(bu
.I spec_file.firmware_end
configuration variable is set to "%endif".
.IP \(bu
.I spec_file.date
is set to the current date and time in "%a %b %d %Y"
.BR strftime (3)
format, if this variable hasn't been set already.
.IP \(bu
.I spec_file.kernel_requires
is formatted as
.CS
Requires:    kernel >= \fIkernel_version\fP-\fIkernel_release\fP.\fIkernel_dist\fP
Requires:    kernel <  \fIkernel_version\fP-\fI(kernel_release + 1)\fP.\fIkernel_dist\fP
.CE
for the Y-stream kernel version, and
.CS
Requires:    kernel = \fIkernel_version\fR-\fIkernel_release\fR.\fIkernel_dist\fR
.CE
for the Z-stream kernel version, if the variable hasn't been set already
(please refer to the
.I Kernel package versioning scheme
section for the additional details regarding Y-stream and Z-stream versions).
.IP \(bu
.I spec_file.module_requires
is set to
.I spec_file.dependencies
value with the "Requires: " string prepended, if the variable hasn't been set
already.
Note that this special configuration variable is deprecated, present only for
the backward compatibility, and this special value generation may be removed
in the future.
.PP
After this configuration processing, parts of the spec template in the
"%{\fB[\fR\fIsection_name\fR.\fB]\fR\fIkey_name\fR}" format (note the presence
of percent sign in comparison to the syntax used for configuration option
substitution) are replaced with evaluated configuration values.
If no appropriate configuration has been found, no replacement occurs.
If configuration option evaluates to empty string, "%{nil}" is inserted into the
resulting spec file.
.\"
.\"
.SH ACTIONS
.SS prepare_sources
Prepare initial file and directory structure.
This action creates directories where various files are expected to be placed
and creates (into a file set in
.B --config
option) module configuration from the template file (which path is determined
by the
.IR defaults.template_dir " and " defaults.config_template
configuration variables; please refer to the
.I File path evaluation
section for the module configuration template path derivation process).
The action creates the following directory hierarchy:
.IP \(bu 3
.B rpm
- directory for storing
.BR rpmbuild (1)
artifacts.
.RS
.IP \(bu 3
.B BUILD
- build directory, used by
.BR rpmbuild (1).
.IP \(bu
.B BUILDROOT
- RPM build root.
.IP \(bu
.B RPMS
- directory where resulting binary RPMs are stored.
.IP \(bu
.B SOURCES
- directory where source tarball and patches are stored.
.IP \(bu
.B SPECS
- directory where generated spec file is placed.
.IP \(bu
.B SRPMS
- directory where resulting source RPM is stored.
.RE
.IP \(bu
.B src
- directory where module sources are expected to be placed.
There are not explicit constrains on the kernel module source file layout, but
it is expected that the main make file is placed in a directory provided in the
.I spec_file.module_build_dir
configuration variable.
.RS
.IP \(bu 3
.B patches
- directory with patches that should be applied to the source.
.IP \(bu
.B firmware
- firmware files.
.RE
.PP
Additionally, if the
.I defaults.git_src_directory
configuration option is set,
source files placed inside directories listed in this whitespace-separated list
checked out (inside the
.B src
directory) from the repository pointed by the
.I defaults.git_dir
configuration option at the revision which specification is set in the
.I defaults.git_revision
configuration option (the actual revision to checkout is the output of
.BR git\ rev-parse (1)
command invocation with the aforementioned specification supplied to it).
.PP
Before configuration template is processed, the following configuration options
are also set:
.IP \(bu 3
.I spec_file.module_build_dir
- set to the value of first element of whitespace-separated list stored in the
.I defaults.git_src_directory
configuration option, or to "ENTER_MODULE_BUILD_DIR", if it is empty.
.IP \(bu
.I spec_file.git_hash
- set to the value returned by
.BR get\ rev-parse (1)
call with
.I defaults.git_revision
revision specification supplied.
.\"
.SS generate_spec
Generate spec file from the spec template (which path is determined by the
.IR defaults.template_dir " and " defaults.spec_template
configuration variables; please refer to the
.I File path evaluation
section for spec template path derivation process) using process described in
.I Spec file generation
section.
As a result of the execution of this action, the
"rpm/SPECS/{\fIspec_file.module_name\fR}.spec" file is generated.
During the generation process, the presence of kernel headers for the
target kernel version and architectures is also checked, and warning message
is printed in case some of them are not present; this check doesn't affect
spec file generation process, however.
.\"
.SS build_rpm
The RPM build action includes several steps:
.IP \(bu 3
Check for the module configuration file presence (provided in
.I defaults.config
configuration variable via the
.B --config
command line option).
Since some configuration values should be derived directly from it,
its absence makes the whole operation senseless, thus the early bailout.
.IP \(bu
Generate (if the
.I defaults.generate_spec_on_build
configuration option is set to
.BR True )
or check (if the
.I defaults.check_spec_on_build
configuration option is set to positive value)
spec file.
Depending on the check level provided in the
.I defaults.check_spec_on build
configuration option, the latter check may lead to warning or to the termination
of the action:
.RS
.TP 3
0
Do not perform the spec file check.
.TP
1
Perform spec file comparison and issue warning in case generated and existing
spec files differ.
.TP
2
Perform spec file comparison and issue warning in case generated and existing
spec files differ, user is asked whether he wants to continue.
.TP
3
Perform spec file comparison and abort action execution in case of any errors
(during spec file generation or comparison).
.RE
.IP
No spec file comparison is performed (regardless of the
.I defaults.check_spec_on_build
configuration option value) if spec file generation is enabled (obviously).
.IP \(bu
Check for the Makefile presence.
Presence of file named "Makefile" somewhere in the source tree allows for
passing this check.
Absence of Makefile leads to early termination with a relevant exit code
(please refer to the
.I EXIT STATUS
section for details).
.IP \(bu
In case quilt integration (specified via the configuration option
.IR default.quilt_support )
is enabled, quilt patches are de-applied.
.IP \(bu
Source tarball creation. Tar file named
"rpm/SOURCES/{\fIspec_file.module_name\fR}-{\fIglobal.module_vendor\fR}-{\fIspec_file.module_version\fR}.tar.bz2"
is created, and files present in the
.B src
directory added to it,
with the following exceptions:
.RS
.IP \(bu 3
.B patches
subdirectory is skipped.
.IP \(bu
All RPM files present in the top level of the
.B src
directory are skipped.
.IP \(bu
Files present in the
.B firmware
source subdirectory are skipped in case boolean configuration option
.I spec_file.firmware_include
is set to
.BR False .
In case there are files present in this directory, warning message
is displayed regarding the matter.
.IP \(bu
Hidden files (files beginning with dot) are skipped, unless the
.I defaults.tar_all
configuration option (controlled via the
.B --tar-all
action-specific command line option) is set to
.BR True .
.IP \(bu
Only files matching the pattern set in the
.I defaults.src_patterns
configuration option are added, if the
.I defaults.tar_strict
configuration option (controlled via the
.B --tar-strict
action-specific command line option) is set to
.BR True .
The default pattern includes only *.c, *.h, Makefile, Kbuild, and Kconfig files,
which should be suitable for the most cases.
.RE
.IP \(bu
All files from the
.B src/patches
directory are copied to the
.B rpm/SOURCES
directory.
.IP \(bu
If current host architecture is among architectures provided in the
.I spec_file.kernel_arch
architectures,
.I rpmbuild
check (rpmbuild -bc --nobuild) succeeded, and the
.I defaults.srpm
configuration option (controlled via the
.B --srpm
action-specific command line option) is not enabled,
an attempt to build binary RPM is performed.
Otherwise, a source RPM is built.
.IP \(bu
In case quilt integration (specified via the configuration option
.IR default.quilt_support )
is enabled, quilt patches are applied back.
.\"
.SS build_iso
This action takes list of files and directories that should be placed
on the Driver Update Disk as a non-option arguments.
It performs the following steps:
.IP \(bu 3
Iterate over the files provided in arguments (recursively descending into
directories) and add to the list of candidate files which satisfy the
following criteria:
.RS
.IP \(bu 3
file name ends with ".rpm",
.IP \(bu
.BR rpmquery (1)
successfully retrieves information regarding RPM architecture from the package,
.IP \(bu
RPM is a binary package or RPM is a source package and the
.I global.include_srpm
configuration option is enabled,
.IP \(bu
RPM is not a debug information package (RPM has group other than
"Development/Debug"),
.IP \\(bu
RPM has a valid GPG signature (if case GPG signature check is enabled; see
.I RPM SIGNATURE VERIFICATION
section for the additional information).
.RE
.IP \(bu
All satisfying candidates then copied in a temporary directory.
Source RPMs are placed in \fBsrc\fR subdirectory in the disk hierarchy, and
binary RPMs are placed in \fBrpms/\fIarch\fR subdirectory, where \fIarch\fR is
the architecture of the binary RPM (with all variants of \fBi386\fR, ...,
\fBi686\fR RPM architecture placed in the \fBi386\fR subdirectory).
.IP \(bu
RPM repository metadata is generated (using the
.BR createrepo (1)
command) in each of the aforementioned binary RPM directories.
.IP \(bu
.B rhdd3
file containing Driver Update Disk signature is created
in the temporary directory.
.IP \(bu
ISO image is created with the
.BR mkisofs (1)
command.
The name of the ISO is provided in the
.I defaults.isofile
option (which can be set via the
.B --isofile
action-specific command line option).
In case no explicit ISO file name is provided, it is generated as
"dd-{\fIspec_file.module_name\fR}-{\fIspec_file.module_version\fR}-{\fIspec_file.module_rpm_release\fR}.{\fIspec_file.rpm_dist\fR}.iso",
or, in case one of values of these configuration options is not a string,
simply "dd.iso".
.\"
.SS dump_config
Dumps configuration dictionary as it has been evaluated by a process described
in the
.I Configuration generation
section.
Output file for the dump is set in the
.I defaults.dump_config_name
option.
.\"
.\"
.SH QUILT INTEGRATION
.B ddiskit
supports
.BR quilt (1)
patch workflow.
Specifically:
.IP \(bu 3
It de-applies quilt patches before building source tarball and applies them
back after the build.
.IP \(bu
It ignores \fBseries\fR file in \fBpatches\fR directory when builds
a list of patches during the
.I generate_spec
action, as well as during the tarball creation in the
.I build_rpm
action.
.IP \(bu
It ignores hidden files during the tarball creation in the
.I build_rpm
action which avoids inclusion of the
.B .pc
directory.
.PP
This behaviour (except the last part that is controlled by the
.I defaults.tar_all
configuration option) is controlled by the
.I defaults.quilt_support
configuration option, which is accessible via the
.BR --quilt-enable " and " --quilt-disable
command line options.
.\"
.\"
.SH MOCK INTEGRATION
.B ddiskit
supports using
.BR mock (1)
for building RPM.
This support is activated via the
.I defaults.mock
configuration option which is controlled via the
.B --mock
action-specific command line option.
When mock support is enabled, the following changes apply:
.IP \(bu 3
.BR mock (1)
is called instead of
.B rpmbuild
for source and binary RPM creation.
Specifically,
.B mock --buildsrpm
is called for source RPM creation and pair of
.B mock --buildsrpm
and
.B mock --rebuild
is used to build binary RPM out of source RPM which is created inside mock
environment.
.IP \(bu
No build check (\fBrpmbuild -bc --nobuild\fR) is performed in order to check
whether it is possible to build binary RPM, it is assumed that mock
can handle it.
.\"
.\"
.SH SOURCE CODE VERIFICATION
As a part of the RPM build process
.RI ( build_rpm
action), source code can be checked for the correspondence with the git
repository from which the code supposedly originates.
It is assumed that the sources are located in the subdirectory provided in the
.I spec_file.module_build_dir
configuration option as of the commit whose ID is provided in the
.I spec_file.git_hash
configuration option.
The check is performed via the
.BR git-diff (1)
command.
The path to the \fB.git\fR directory containing the git repository against which
module's source code should be checked has to be provided in the
.I defaults.git_repo
configuration option.
The necessity of the check itself, as well as its crucialness is specified via
the
.I default.check_git_src
configuration option, with the following meaning of its value:
.TP 3
0
The check is skipped.
.TP
1
The check is performed and the warning is issued if the sources differ from the
ones present in the repository.
.TP
2
The check is performed and the build process is aborted in case of sources
discrepancy or other issues during the check.
.PP
The source code verification is performed when quilt patches are already
de-applied.
.\"
.\"
.SH RPM GPG SIGNATURE VERIFICATION
As a part of ISO build process
.RI ( build_iso
action), included RPMs can be checked for the presence and correctness of their
GPG signature.
The necessity of check is controlled via the
.I rpm_gpg_check.check_level
configuration option, which can have one of the following values:
.TP 3
0
The check is skipped.
.TP
1
The check is performed and the warning is issued for each RPM that failed it.
.TP
2
The check is performed and RPMs that didn't pass the check are skipped.
.TP
3
The check is performed and ISO creation is aborted if one of RPMs failed the
check.
.PP
The boolean configuration option
.I rpm_gpg_check.use_keyring
controls whether specific keyring directory containing specific set of keys
should be used or just GPG keys present in host's RPM DB.
In case usage of keyring directory is enabled, configuration option
.I rpm_gpg_check.keyring_dir
points to the directory containing public GPG keys.
Note that in order to use these files, their names should end with ".key"
(this is, in fact, RPM's implicit assumption).
.PP
This check is enabled by default in
.I rh-release
profile and allows verifying that RPMs added to the release ISO have Red Hat's
GPG signature.
.\"
.\"
.SH USAGE EXAMPLE
.IP 1. 3
Create initial directory structure and module configuration.
.CS
$ \fBddiskit\fP prepare_sources
Writing new config file (module.config)... OK
Creating directory structure for RPM build ... OK
Creating directory structure for source code ... OK
Put your module source code in src directory.
.CE
.IP 2.
Copy your code into the \fBsrc\fR directory:
.CS
$ tree src
src
├── drivers
│   └── net
│       └── ethernet
│           └── broadcom
│               ├── Makefile
│               ├── tg3.c
│               └── tg3.h
└── patches
    ├── 0001-test.patch
    └── 0002-test.patch
.CE
.RS
.IP \(bu 3
Please, respect the directory hierarchy for the drivers which are originally part
of the kernel tree.
.IP \(bu 3
Additional patches for the code could be placed in the \fBpatches\fR directory.
.RE
.IP 3.
Fill out the \fBmodule.config\fR and generate the spec file:
.CS
$ \fBddiskit\fP generate_spec
Checking config ...
Config check ... OK
RPM spec file "rpm/SPECS/tg3.spec" exists!
Patches found, adding to the spec file:
  Patch0: 0001-test.patch
  Patch1: 0002-test.patch
Firmware directory is empty or nonexistent, skipping
Writing spec into rpm/SPECS/tg3.spec ... OK
.CE
.RS
.IP \(bu 3
The resulting spec file is placed in the \fBrpm/SPEC/\fR directory,
you can optionally check it out before proceeding.
.RE
.IP 4.
Build binary RPM:
.CS
$ \fBddiskit\fP build_rpm
.CE
.IP 5.
Build Driver Update Disk ISO:
.CS
$ \fBddiskit\fP build_iso
.CE
.\"
.\"
.SH FILES
.TP
.B /usr/share/ddiskit.config
Package default configuration.
.TP
.B /etc/ddiskit.config
System-wide ("site") configuration.
.TP
.B ~/.ddiskitrc
User configuration.
.TP
.B module.config
Default configuration name.
.TP
.B /usr/share/ddiskit/templates/spec
Template for RPM spec file generation.
Path to it can be overridden by changing
.I defaults.spec_template
configuration option or
.IR defaults.template_dir ,
please refer to the
.I File path evaluation
section for the additional information.
.TP
.B /usr/share/ddiskit/templates/config
Template for module configuration.
Path to it can be overridden by changing
.I defaults.config_template
configuration option or
.IR defaults.template_dir ,
please refer to the
.I File path evaluation
section for the additional information.
.TP
.B /usr/share/ddiskit/profiles/default
Default profile.
Contains configuration options which are useful in non-specific cases
(none, currently).
The profile in use is selected via the
.I defaults.profile
configuration option.
Path to profile is configured by the
.IR defaults.profile_dir ,
configuration option, please refer to the
.I File path evaluation
section for the additional information.
.TP
.B /usr/share/ddiskit/profiles/rh-testing
Profile which contains configuration options used for the testing DUP RPMs
by Red Hat.
This includes the disclaimer that the package is provided for the
testing purposes.
.TP
.B /usr/share/ddiskit/profiles/rh-release
Profile which contains configuration options used for the release DUP RPMs
by Red Hat.
This includes enablement of various strict checks (such as Git commit ID and
RPM GPG signature verification).
.\"
.\"
.SH EXIT STATUS
.TP
.B 0
successful execution.
.TP
.B 1
generic error (no additional information available).
.TP
.B 2
problems during command line argument parsing.
.TP
.B 3
problems during the configuration check phase (see
.I Configuration check
section for the additional information).
.TP
.B 4
problem occurred when tried to de-apply quilt patches (patches do not de-apply
cleanly, for example).
.TP
.B 5
problem occurred when tried to apply quilt patches.
.TP
.B 6
problem occurred during the sources verification.
.TP
.B 7
problem occurred during RPM GPG signature verification.
.TP
.B 8
problem occurred during git checkout of source files.
.TP
.B 9
problem occurred during spec file comparison.
.TP
.B 32
generic input/output error.
.TP
.B 34
error occurred while reading configuration file.
.TP
.B 35
error occurred while writing module configuration file
.RI ( prepare_sources
action).
.TP
.B 36
spec template file read error
.RI ( generate_spec
action).
.TP
.B 38
spec read error (unused currently).
.TP
.B 39
spec write error
.RI ( generate_spec
action).
.TP
.B 41
source archive write error
.RI ( build_rpm
action).
.TP
.B 42
Makefile not found
.RI ( build_rpm
action).
.TP
.B 45
Driver Update Disk signature write error.
.TP
.B 47
configuration dump file write error.
.TP
.B 49
directory structure creation error.
.\"
.\"
.SH REPORTING BUGS
Problems with
.B ddiskit
should be reported to
.UR https://github.com/orosp/ddiskit/issues
ddiskit project bug tracker
.UE
.\"
.\"
.SH HISTORY
The initial version of
.B ddiskit
was created by John W. Linville in the year 2005 for 2.6-based
Red Hat Enterprise Linux and Fedora Core distributions
(like 2.6.9-based RHEL 4).
It filled "the same need which Doug Ledford's Device Driver Update Disk
Devel Kit filled for prior generations of Red Hat distributions" which was used
for the Linux 2.4-series based Red Hat distributions around the year 2003.
In 2007, the responsibility for maintaining and enhancing
.B ddiskit
was passed to Jon Masters, who then developed
.B ddiskit
during the RHEL 5 and RHEL 6 era.
The third incarnation of
.B ddiskit
was conceived in 2016 by Petr Oroš in an attempt to bring more automation to
the process of Driver Update Disk creation along with RHEL 7 support.
.\"
.\"
.SH SEE ALSO
.BR rpmbuild (1),
.BR dkms (8),
.BR akmods (1),
.BR mock (1),
.BR quilt (1)
.PP
.UR http://people.redhat.com/jcm/el6/dup/docs/dup_book.pdf
Jon Masters. Red Hat Driver Update Packages. Official Reference Guide
.UE
.PP
.UR https://github.com/orosp/ddiskit/
ddiskit project repository
.UE
